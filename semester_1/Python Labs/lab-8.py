#1 часть Вводятся 2 числа: N1, N2 -- количества участков разбиения для численного
#интегрирования.
#метод правых прямоугольников, метод парабол
#Вывести таблицу
#2 часть Для менее точного метода необходимо итерационно определить количество
#участков разбиения, для которого интеграл вычислен с заданной точностью.
#|I(N) − I(2N)| < ε
#По введенному значению первообразной необходимо вычислить абсолютную и
#относительную погрешности интегрирования.

from math import *
import numpy as np

#Функция для методов
def simpson(f,a,b,n):
    h = (b-a)/n
    k = 0
    x = a + h
    for i in np.arange(1,n/2 + 1):
        k += 4*f(x)
        x += 2*h
    x = a + 2*h
    for i in np.arange(1,n/2):
        k += 2*f(x)
        x += 2*h
    return (h/3)*(f(a)+f(b)+k)

def right_rectangle(f,a,b,n):
    h = (b-a)/n
    k = 0
    for i in range (1,n):
        k += f(a+i*h)
    return h*(f(b)+k)
def f(x):
    return sin(x)
#--------------------------------------------------------------------------------
#Ввод данных
while True:
    a = int(input('Введите нижний предел интегрирования(начало отрезка [a,b]): '))
    b = int(input('Введите верхний предел интегрирования(конец отрезка [a,b]): '))
    if b<a or a==b:
        print('---Верхний предел интегрирования должен быть больше нижнего b>a')
    else:
        break
    
print('---Используем метод парабол количество делений должно быть четным!!!')
while True:
    n1 = int(input('Введите количество делений для кривой(N1): '))
    n2 = int(input('Введите количество делений для кривой(N2): '))
    if n1 <= 0 and n2<=0:
        print('---Количество делений должно быть больше нуля.')
    elif (n1 % 2 != 0) or (n2 % 2 != 0) or n1 <= 0 or n2 <= 0:
        print('---Количесво делений должно быть четным и N > 0.')
    else:
        break
    
i1 = right_rectangle(f,a,b,n1)
i2 = right_rectangle(f,a,b,n2)
i3 = simpson(f,a,b,n1)
i4 = simpson(f,a,b,n2)

print('+' + '-'*20 + '+' + '-'*15 + '+' + '-'*15 + '+' + '-'*15 + '+')
print("|{:^20}|{:^15}|{:^15}|{:^15}|".format('Кол-во делений',f'{n1:g}',f'{n2:g}','Отклонение'))
print('+' + '-'*20 + '+' + '-'*15 + '+' + '-'*15 + '+' + '-'*15 + '+')
print("|{:^20}|{:^15}|{:^15}|{:^15}|".format('Метод прав.прямоуг.', f'{i1:.8g}', f'{i2:.8g}',f'{abs(i2-i1):.8g}'))
print('+' + '-'*20 + '+' + '-'*15 + '+' + '-'*15 + '+' + '-'*15 + '+')
print("|{:^20}|{:^15}|{:^15}|{:^15}|".format('Метод парабол', f'{i3:.8g}', f'{i4:.8g}',f'{abs(i3-i4):.8g}'))
print('+' + '-'*20 + '+' + '-'*15 + '+' + '-'*15 + '+' + '-'*15 + '+')
#--------------------------------------------------------------------------------
#2 часть
print('Метод правых прямоугольников показал  больше отклонение, чем метод парабол.')
e = float(input('Введите наибольшую допустимую погрешность: '))
while abs(right_rectangle(f,a,b,n1)-right_rectangle(f,a,b,2*n1)) > e:
    n1 *= 2
i_t = right_rectangle(f,a,b,n1)
i_p = right_rectangle(f,a,b,2*n1)
print('\nДопустимый результат для введенной погрешности достигается после введения', n1, 'отрезков. Интеграл равен:', i_p)
print('     - Абсолютная погрешность:', abs(i_t - i_p))
print('     - Относительная погрешность:', abs((i_t - i_p)/i_t))
